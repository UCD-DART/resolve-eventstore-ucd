{"version":3,"sources":["../src/secrets-manager.ts"],"names":["getLog","getSecret","pool","selector","log","debug","databaseName","secretsTableName","escapeId","executeStatement","escape","error","Error","message","verbose","stack","databaseNameAsId","secretsTableNameAsId","sql","rows","secret","length","setSecret","deleteSecret","getSecretsManager","manager","Object","freeze","bind"],"mappings":"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","sourcesContent":["import getLog from './js/get-log'\nimport { SecretsManager } from 'resolve-core'\nimport { AdapterPool } from './types'\n\nconst getSecret = async (\n  pool: AdapterPool,\n  selector: string\n): Promise<string> => {\n  const log = getLog('secretsManager:getSecret')\n  log.debug(`retrieving secret value from the database`)\n\n  const {\n    databaseName,\n    secretsTableName,\n    escapeId,\n    executeStatement,\n    escape,\n  } = pool\n\n  // TODO: refactor\n  if (\n    !secretsTableName ||\n    !escapeId ||\n    !databaseName ||\n    !executeStatement ||\n    !escape\n  ) {\n    const error = Error(`adapter pool was not initialized properly!`)\n    log.error(error.message)\n    log.verbose(error.stack || error.message)\n    throw error\n  }\n\n  log.verbose(`selector: ${selector}`)\n  log.verbose(`databaseName: ${databaseName}`)\n  log.verbose(`secretsTableName: ${secretsTableName}`)\n\n  const databaseNameAsId = escapeId(databaseName)\n  const secretsTableNameAsId = escapeId(secretsTableName)\n\n  const sql = `\n    SELECT \"secret\" \n    FROM ${databaseNameAsId}.${secretsTableNameAsId} \n    WHERE \"id\"=${escape(selector)} LIMIT 1;`\n\n  log.debug(`executing SQL query`)\n  log.verbose(sql)\n\n  const rows = await executeStatement(sql)\n\n  log.debug(`query executed, returning result`)\n\n  const { secret } = rows && rows.length ? rows[0] : { secret: null }\n\n  return secret\n}\n\nconst setSecret = async (\n  pool: AdapterPool,\n  selector: string,\n  secret: string\n): Promise<void> => {\n  const log = getLog('secretsManager:setSecret')\n  log.debug(`setting secret value within database`)\n  const {\n    databaseName,\n    secretsTableName,\n    escape,\n    escapeId,\n    executeStatement,\n  } = pool\n\n  // TODO: refactor\n  if (\n    !secretsTableName ||\n    !escapeId ||\n    !databaseName ||\n    !executeStatement ||\n    !escape\n  ) {\n    const error = Error(`adapter pool was not initialized properly!`)\n    log.error(error.message)\n    log.verbose(error.stack || error.message)\n    throw error\n  }\n\n  log.verbose(`selector: ${selector}`)\n  log.verbose(`databaseName: ${databaseName}`)\n  log.verbose(`secretsTableName: ${secretsTableName}`)\n\n  const databaseNameAsId = escapeId(databaseName)\n  const secretsTableNameAsId = escapeId(secretsTableName)\n\n  // logging of this sql query can lead to security issues\n  const sql = `INSERT INTO ${databaseNameAsId}.${secretsTableNameAsId}(\"id\", \"secret\") \n    VALUES (${escape(selector)}, ${escape(secret)})`\n\n  try {\n    log.debug(`executing SQL query`)\n\n    await executeStatement(sql)\n\n    log.debug(`query executed successfully`)\n  } catch (error) {\n    log.error(error.message)\n    log.verbose(error.stack)\n    throw error\n  }\n}\n\nconst deleteSecret = async (\n  pool: AdapterPool,\n  selector: string\n): Promise<void> => {\n  const log = getLog('secretsManager:deleteSecret')\n\n  log.debug(`removing secret from the database`)\n  const {\n    databaseName,\n    secretsTableName,\n    escapeId,\n    escape,\n    executeStatement,\n  } = pool\n\n  // TODO: refactor\n  if (\n    !secretsTableName ||\n    !escapeId ||\n    !escape ||\n    !databaseName ||\n    !executeStatement\n  ) {\n    const error = Error(`adapter pool was not initialized properly!`)\n    log.error(error.message)\n    log.verbose(error.stack || error.message)\n    throw error\n  }\n\n  log.verbose(`selector: ${selector}`)\n  log.verbose(`databaseName: ${databaseName}`)\n  log.verbose(`secretsTableName: ${secretsTableName}`)\n\n  const databaseNameAsId = escapeId(databaseName)\n  const secretsTableNameAsId = escapeId(secretsTableName)\n\n  const sql = `DELETE FROM ${databaseNameAsId}.${secretsTableNameAsId} \n     WHERE \"id\"=${escape(selector)}`\n\n  log.debug(`executing SQL query`)\n\n  await executeStatement(sql)\n\n  log.debug(`query executed successfully`)\n}\n\nconst getSecretsManager = (pool: AdapterPool): SecretsManager => {\n  const log = getLog('getSecretsManager')\n  log.debug('building secrets manager')\n  const manager = Object.freeze({\n    getSecret: getSecret.bind(null, pool),\n    setSecret: setSecret.bind(null, pool),\n    deleteSecret: deleteSecret.bind(null, pool),\n  })\n  log.debug('secrets manager built')\n  return manager\n}\n\nexport default getSecretsManager\n"],"file":"secrets-manager.js"}