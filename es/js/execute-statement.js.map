{"version":3,"sources":["../../src/js/execute-statement.js"],"names":["EOL","executeStatement","pool","sql","errors","rows","connection","Postgres","user","config","database","port","host","password","keepAlive","connectionTimeoutMillis","idle_in_transaction_session_timeout","query_timeout","statement_timeout","connect","result","query","Array","isArray","JSON","parse","stringify","error","push","end","length","Error","message","map","join","stack","errorCodes","Set","code","filter","size"],"mappings":"AAAA,SAASA,GAAT,QAAoB,IAApB;;AAEA,MAAMC,gBAAgB,GAAG,OAAOC,IAAP,EAAaC,GAAb,KAAqB;AAC5C,QAAMC,MAAM,GAAG,EAAf;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,QAAMC,UAAU,GAAG,IAAIJ,IAAI,CAACK,QAAT,CAAkB;AACnCC,IAAAA,IAAI,EAAEN,IAAI,CAACO,MAAL,CAAYD,IADiB;AAEnCE,IAAAA,QAAQ,EAAER,IAAI,CAACO,MAAL,CAAYC,QAFa;AAGnCC,IAAAA,IAAI,EAAET,IAAI,CAACO,MAAL,CAAYE,IAHiB;AAInCC,IAAAA,IAAI,EAAEV,IAAI,CAACO,MAAL,CAAYG,IAJiB;AAKnCC,IAAAA,QAAQ,EAAEX,IAAI,CAACO,MAAL,CAAYI,QALa;AAMnCC,IAAAA,SAAS,EAAE,KANwB;AAOnCC,IAAAA,uBAAuB,EAAE,KAPU;AAQnCC,IAAAA,mCAAmC,EAAE,KARF;AASnCC,IAAAA,aAAa,EAAE,KAToB;AAUnCC,IAAAA,iBAAiB,EAAE;AAVgB,GAAlB,CAAnB;;AAaA,MAAI;AACF,UAAMZ,UAAU,CAACa,OAAX,EAAN;AACA,UAAMC,MAAM,GAAG,MAAMd,UAAU,CAACe,KAAX,CAAiBlB,GAAjB,CAArB;;AAEA,QAAIiB,MAAM,IAAI,IAAV,IAAkBE,KAAK,CAACC,OAAN,CAAcH,MAAM,CAACf,IAArB,CAAtB,EAAkD;AAChDA,MAAAA,IAAI,GAAGmB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,MAAM,CAACf,IAAtB,CAAX,CAAP;AACD;;AAED,WAAOA,IAAP;AACD,GATD,CASE,OAAOsB,KAAP,EAAc;AACdvB,IAAAA,MAAM,CAACwB,IAAP,CAAYD,KAAZ;AACD,GAXD,SAWU;AACR,UAAMrB,UAAU,CAACuB,GAAX,EAAN;AACD;;AAED,MAAIzB,MAAM,CAAC0B,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAMH,KAAK,GAAG,IAAII,KAAJ,EAAd;AACAJ,IAAAA,KAAK,CAACK,OAAN,GAAgB5B,MAAM,CAAC6B,GAAP,CAAW,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAiBA,OAA5B,EAAqCE,IAArC,CAA0ClC,GAA1C,CAAhB;AACA2B,IAAAA,KAAK,CAACQ,KAAN,GAAc/B,MAAM,CAAC6B,GAAP,CAAW,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAeA,KAA1B,EAAiCD,IAAjC,CAAsClC,GAAtC,CAAd;AAEA,UAAMoC,UAAU,GAAG,IAAIC,GAAJ,CACjBjC,MAAM,CAAC6B,GAAP,CAAW,CAAC;AAAEK,MAAAA;AAAF,KAAD,KAAcA,IAAzB,EAA+BC,MAA/B,CAAuCD,IAAD,IAAUA,IAAI,IAAI,IAAxD,CADiB,CAAnB;;AAGA,QAAIF,UAAU,CAACI,IAAX,KAAoB,CAAxB,EAA2B;AACzBb,MAAAA,KAAK,CAACW,IAAN,GAAa,CAAC,GAAGF,UAAJ,EAAgB,CAAhB,CAAb;AACD;;AAED,UAAMT,KAAN;AACD;;AAED,SAAOtB,IAAP;AACD,CA/CD;;AAiDA,eAAeJ,gBAAf","sourcesContent":["import { EOL } from 'os'\n\nconst executeStatement = async (pool, sql) => {\n  const errors = []\n  let rows = null\n  const connection = new pool.Postgres({\n    user: pool.config.user,\n    database: pool.config.database,\n    port: pool.config.port,\n    host: pool.config.host,\n    password: pool.config.password,\n    keepAlive: false,\n    connectionTimeoutMillis: 45000,\n    idle_in_transaction_session_timeout: 45000,\n    query_timeout: 45000,\n    statement_timeout: 45000,\n  })\n\n  try {\n    await connection.connect()\n    const result = await connection.query(sql)\n\n    if (result != null && Array.isArray(result.rows)) {\n      rows = JSON.parse(JSON.stringify(result.rows))\n    }\n\n    return rows\n  } catch (error) {\n    errors.push(error)\n  } finally {\n    await connection.end()\n  }\n\n  if (errors.length > 0) {\n    const error = new Error()\n    error.message = errors.map(({ message }) => message).join(EOL)\n    error.stack = errors.map(({ stack }) => stack).join(EOL)\n\n    const errorCodes = new Set(\n      errors.map(({ code }) => code).filter((code) => code != null)\n    )\n    if (errorCodes.size === 1) {\n      error.code = [...errorCodes][0]\n    }\n\n    throw error\n  }\n\n  return rows\n}\n\nexport default executeStatement\n"],"file":"execute-statement.js"}