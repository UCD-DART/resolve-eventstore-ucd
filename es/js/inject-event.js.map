{"version":3,"sources":["../../src/js/inject-event.js"],"names":["RESERVED_EVENT_SIZE","injectEvent","pool","event","databaseName","eventsTableName","executeStatement","escapeId","escape","serializedEvent","aggregateId","aggregateVersion","type","JSON","stringify","payload","join","byteLength","Buffer","databaseNameAsId","threadsTableAsId","eventsTableAsId","missingFields","threadId","push","threadCounter","timestamp","length","Error"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,aAApC;;AAEA,MAAMC,WAAW,GAAG,gBAAgBC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC/C,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,eAFI;AAGJC,IAAAA,gBAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFN,IANJ;AAQA,QAAMO,eAAe,GAAG,CACrB,GAAED,MAAM,CAACL,KAAK,CAACO,WAAP,CAAoB,GADP,EAErB,GAAE,CAACP,KAAK,CAACQ,gBAAiB,GAFL,EAGrB,GAAEH,MAAM,CAACL,KAAK,CAACS,IAAP,CAAa,GAHA,EAItBJ,MAAM,CAACK,IAAI,CAACC,SAAL,CAAeX,KAAK,CAACY,OAAN,IAAiB,IAAjB,GAAwBZ,KAAK,CAACY,OAA9B,GAAwC,IAAvD,CAAD,CAJgB,EAKtBC,IALsB,CAKjB,EALiB,CAAxB;AAOA,QAAMC,UAAU,GAAGC,MAAM,CAACD,UAAP,CAAkBR,eAAlB,IAAqCT,mBAAxD;AAEA,QAAMmB,gBAAgB,GAAGZ,QAAQ,CAACH,YAAD,CAAjC;AACA,QAAMgB,gBAAgB,GAAGb,QAAQ,CAAE,GAAEF,eAAgB,UAApB,CAAjC;AACA,QAAMgB,eAAe,GAAGd,QAAQ,CAACF,eAAD,CAAhC,CApB+C,CAsB/C;;AACA,QAAMiB,aAAa,GAAG,EAAtB;;AACA,MAAInB,KAAK,CAACoB,QAAN,IAAkB,IAAtB,EAA4B;AAC1BD,IAAAA,aAAa,CAACE,IAAd,CAAoB,YAApB;AACD;;AACD,MAAIrB,KAAK,CAACsB,aAAN,IAAuB,IAA3B,EAAiC;AAC/BH,IAAAA,aAAa,CAACE,IAAd,CAAoB,iBAApB;AACD;;AACD,MAAIrB,KAAK,CAACuB,SAAN,IAAmB,IAAvB,EAA6B;AAC3BJ,IAAAA,aAAa,CAACE,IAAd,CAAoB,aAApB;AACD;;AACD,MAAIF,aAAa,CAACK,MAAd,GAAuB,CAA3B,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CACH,aAAYN,aAAa,CAACN,IAAd,CAAmB,IAAnB,CAAyB,mBAAkBH,IAAI,CAACC,SAAL,CACtDX,KADsD,CAEtD,EAHE,CAAN;AAKD,GAvC8C,CAyC/C;;;AACA,QAAMG,gBAAgB,CAAE;;eAEXa,gBAAiB,IAAGC,gBAAiB;oDACA,CAACjB,KAAK,CAACsB,aAAc;2BAC9C,CAACtB,KAAK,CAACoB,QAAS;;;kBAGzBJ,gBAAiB,IAAGE,eAAgB;;;;;;;;;;;QAW9C,CAAClB,KAAK,CAACsB,aAAc;QACrB,CAACtB,KAAK,CAACuB,SAAU;QACjBjB,eAAgB;QAChBQ,UAAW;;GArBK,CAAtB;AAwBD,CAlED;;AAoEA,eAAehB,WAAf","sourcesContent":["import { RESERVED_EVENT_SIZE } from './constants'\n\nconst injectEvent = async function (pool, event) {\n  const {\n    databaseName,\n    eventsTableName,\n    executeStatement,\n    escapeId,\n    escape,\n  } = pool\n\n  const serializedEvent = [\n    `${escape(event.aggregateId)},`,\n    `${+event.aggregateVersion},`,\n    `${escape(event.type)},`,\n    escape(JSON.stringify(event.payload != null ? event.payload : null)),\n  ].join('')\n\n  const byteLength = Buffer.byteLength(serializedEvent) + RESERVED_EVENT_SIZE\n\n  const databaseNameAsId = escapeId(databaseName)\n  const threadsTableAsId = escapeId(`${eventsTableName}-threads`)\n  const eventsTableAsId = escapeId(eventsTableName)\n\n  // prettier-ignore\n  const missingFields = []\n  if (event.threadId == null) {\n    missingFields.push(`\"threadId\"`)\n  }\n  if (event.threadCounter == null) {\n    missingFields.push(`\"threadCounter\"`)\n  }\n  if (event.timestamp == null) {\n    missingFields.push(`\"timestamp\"`)\n  }\n  if (missingFields.length > 0) {\n    throw new Error(\n      `The field ${missingFields.join(', ')} is required in ${JSON.stringify(\n        event\n      )}`\n    )\n  }\n\n  // prettier-ignore\n  await executeStatement(`\n    WITH \"cte\" AS (\n      UPDATE ${databaseNameAsId}.${threadsTableAsId} SET\n      \"threadCounter\" = GREATEST(\"threadCounter\", ${+event.threadCounter} + 1)\n      WHERE \"threadId\" = ${+event.threadId}\n      RETURNING \"threadId\"\n    )\n    INSERT INTO ${databaseNameAsId}.${eventsTableAsId}(\n    \"threadId\",\n    \"threadCounter\",\n    \"timestamp\",\n    \"aggregateId\",\n    \"aggregateVersion\",\n    \"type\",\n    \"payload\",\n    \"eventSize\"\n    ) VALUES (\n      (SELECT \"threadId\" FROM \"cte\" LIMIT 1),\n      ${+event.threadCounter},\n      ${+event.timestamp},\n      ${serializedEvent},\n      ${byteLength}\n    )\n  `)\n}\n\nexport default injectEvent\n"],"file":"inject-event.js"}