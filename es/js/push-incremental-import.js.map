{"version":3,"sources":["../../src/js/push-incremental-import.js"],"names":["RESERVED_EVENT_SIZE","pushIncrementalImport","executeStatement","databaseName","eventsTableName","escapeId","escape","events","importId","databaseNameAsId","databaseNameAsStr","incrementalImportTableAsId","incrementalImportTableAsString","map","event","serializedEvent","timestamp","aggregateId","type","JSON","stringify","payload","join","byteLength","Buffer","error","message","indexOf","test","Error"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,aAApC;;AAEA,MAAMC,qBAAqB,GAAG,OAC5B;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA,YAApB;AAAkCC,EAAAA,eAAlC;AAAmDC,EAAAA,QAAnD;AAA6DC,EAAAA;AAA7D,CAD4B,EAE5BC,MAF4B,EAG5BC,QAH4B,KAIzB;AACH,MAAI;AACF,UAAMC,gBAAgB,GAAGJ,QAAQ,CAACF,YAAD,CAAjC;AACA,UAAMO,iBAAiB,GAAGJ,MAAM,CAACH,YAAD,CAAhC;AACA,UAAMQ,0BAA0B,GAAGN,QAAQ,CACxC,GAAED,eAAgB,qBADsB,CAA3C;AAGA,UAAMQ,8BAA8B,GAAGN,MAAM,CAC1C,GAAEF,eAAgB,qBADwB,CAA7C;AAIA,UAAMF,gBAAgB,CACnB;;;;;;;;;;;cAWOI,MAAM,CACL,8BAA6BA,MAAM,CAACE,QAAD,CAAW,cADzC,CAEN;oCACsBI,8BAA+B;mCAChCF,iBAAkB;;;;oBAIjCD,gBAAiB,IAAGE,0BAA2B;;iBAElDJ,MAAM,CACdM,GADQ,CACHC,KAAD,IAAW;AACd,YAAMC,eAAe,GAAG,CACrB,GAAE,CAACD,KAAK,CAACE,SAAU,GADE,EAErB,GAAEV,MAAM,CAACQ,KAAK,CAACG,WAAP,CAAoB,GAFP,EAGrB,GAAEX,MAAM,CAACQ,KAAK,CAACI,IAAP,CAAa,GAHA,EAItBZ,MAAM,CACJa,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACO,OAAN,IAAiB,IAAjB,GAAwBP,KAAK,CAACO,OAA9B,GAAwC,IAAvD,CADI,CAJgB,EAOtBC,IAPsB,CAOjB,EAPiB,CAAxB,CADc,CAUd;;AACA,YAAMC,UAAU,GACdC,MAAM,CAACD,UAAP,CAAkBR,eAAlB,IAAqCf,mBADvC;AAGA,aAAQ,IAAGe,eAAgB,KAAIQ,UAAW,sCAA1C;AACD,KAhBQ,EAiBRD,IAjBQ,CAiBH,GAjBG,CAiBE;OAvCO,CAAtB;AA0CD,GApDD,CAoDE,OAAOG,KAAP,EAAc;AACd,QACEA,KAAK,IAAI,IAAT,KACCA,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsB,gCAAtB,IAA0D,CAAC,CAA3D,IACC,4BAA4BC,IAA5B,CAAiCH,KAAK,CAACC,OAAvC,CAFF,CADF,EAIE;AACA,YAAM,IAAIG,KAAJ,CAAW,wBAAuBrB,QAAS,iBAA3C,CAAN;AACD,KAND,MAMO;AACL,YAAMiB,KAAN;AACD;AACF;AACF,CApED;;AAsEA,eAAexB,qBAAf","sourcesContent":["import { RESERVED_EVENT_SIZE } from './constants'\n\nconst pushIncrementalImport = async (\n  { executeStatement, databaseName, eventsTableName, escapeId, escape },\n  events,\n  importId\n) => {\n  try {\n    const databaseNameAsId = escapeId(databaseName)\n    const databaseNameAsStr = escape(databaseName)\n    const incrementalImportTableAsId = escapeId(\n      `${eventsTableName}-incremental-import`\n    )\n    const incrementalImportTableAsString = escape(\n      `${eventsTableName}-incremental-import`\n    )\n\n    await executeStatement(\n      `WITH \"CTE\" AS (\n          SELECT 0 AS \"Zero\" WHERE (\n            (SELECT 1 AS \"IncrementalImportFailed\")\n          UNION ALL\n            (SELECT 1 AS \"IncrementalImportFailed\"\n            FROM \"pg_catalog\".\"pg_class\" \"CLS\"\n            LEFT JOIN \"pg_catalog\".\"pg_description\" \"DESC\"\n            ON \"CLS\".\"oid\" = \"DESC\".\"objoid\"\n            LEFT JOIN \"pg_catalog\".\"pg_namespace\" \"NS\"\n            ON \"CLS\".\"relnamespace\" = \"NS\".\"oid\"\n            WHERE \"DESC\".\"description\" <>\n            ${escape(\n              `RESOLVE INCREMENTAL-IMPORT ${escape(importId)} OWNED TABLE`\n            )}\n            AND \"CLS\".\"relname\" = ${incrementalImportTableAsString}\n            AND \"NS\".\"nspname\" = ${databaseNameAsStr}\n            AND \"CLS\".\"relkind\" = 'r')\n          ) = 1\n        )\n      INSERT INTO ${databaseNameAsId}.${incrementalImportTableAsId}(\n        \"timestamp\", \"aggregateId\", \"type\", \"payload\", \"eventSize\"\n      ) VALUES ${events\n        .map((event) => {\n          const serializedEvent = [\n            `${+event.timestamp},`,\n            `${escape(event.aggregateId)},`,\n            `${escape(event.type)},`,\n            escape(\n              JSON.stringify(event.payload != null ? event.payload : null)\n            ),\n          ].join('')\n\n          // TODO: Improve calculation byteLength depend on codepage and wide-characters\n          const byteLength =\n            Buffer.byteLength(serializedEvent) + RESERVED_EVENT_SIZE\n\n          return `(${serializedEvent}, ${byteLength} + (SELECT \"CTE\".\"Zero\" FROM \"CTE\"))`\n        })\n        .join(',')}\n      `\n    )\n  } catch (error) {\n    if (\n      error != null &&\n      (error.message.indexOf('subquery used as an expression') > -1 ||\n        /Table.*? does not exist$/i.test(error.message))\n    ) {\n      throw new Error(`Incremental importId=${importId} does not exist`)\n    } else {\n      throw error\n    }\n  }\n}\n\nexport default pushIncrementalImport\n"],"file":"push-incremental-import.js"}