{"version":3,"sources":["../../src/js/drop.js"],"names":["EventstoreResourceNotExistError","EOL","drop","databaseName","eventsTableName","snapshotsTableName","executeStatement","escapeId","databaseNameAsId","eventsTableNameAsId","threadsTableNameAsId","freezeTableNameAsId","snapshotsTableNameAsId","aggregateIdAndVersionIndexName","aggregateIndexName","aggregateVersionIndexName","typeIndexName","timestampIndexName","statements","errors","statement","error","code","push","length","Error","message","map","join","stack","errorCodes","Set","filter","size"],"mappings":"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","sourcesContent":["import { EventstoreResourceNotExistError } from 'resolve-eventstore-base'\nimport { EOL } from 'os'\n\nconst drop = async ({\n  databaseName,\n  eventsTableName,\n  snapshotsTableName,\n  executeStatement,\n  escapeId,\n}) => {\n  const databaseNameAsId = escapeId(databaseName)\n  const eventsTableNameAsId = escapeId(eventsTableName)\n  const threadsTableNameAsId = escapeId(`${eventsTableName}-threads`)\n  const freezeTableNameAsId = escapeId(`${eventsTableName}-freeze`)\n  const snapshotsTableNameAsId = escapeId(snapshotsTableName)\n\n  const aggregateIdAndVersionIndexName = escapeId(\n    `${eventsTableName}-aggregateIdAndVersion`\n  )\n  const aggregateIndexName = escapeId(`${eventsTableName}-aggregateId`)\n  const aggregateVersionIndexName = escapeId(\n    `${eventsTableName}-aggregateVersion`\n  )\n  const typeIndexName = escapeId(`${eventsTableName}-type`)\n  const timestampIndexName = escapeId(`${eventsTableName}-timestamp`)\n\n  const statements = [\n    `DROP TABLE ${databaseNameAsId}.${eventsTableNameAsId}`,\n\n    `DROP INDEX IF EXISTS ${databaseNameAsId}.${aggregateIdAndVersionIndexName}`,\n    `DROP INDEX IF EXISTS ${databaseNameAsId}.${aggregateIndexName}`,\n    `DROP INDEX IF EXISTS ${databaseNameAsId}.${aggregateVersionIndexName}`,\n    `DROP INDEX IF EXISTS ${databaseNameAsId}.${typeIndexName}`,\n    `DROP INDEX IF EXISTS ${databaseNameAsId}.${timestampIndexName}`,\n\n    `DROP TABLE ${databaseNameAsId}.${threadsTableNameAsId}`,\n\n    `DROP TABLE IF EXISTS ${databaseNameAsId}.${freezeTableNameAsId}`,\n\n    `DROP TABLE ${databaseNameAsId}.${snapshotsTableNameAsId}`,\n  ]\n  const errors = []\n\n  for (const statement of statements) {\n    try {\n      await executeStatement(statement)\n    } catch (error) {\n      if (error != null && `${error.code}` === '42P01') {\n        throw new EventstoreResourceNotExistError(\n          `Double-free eventstore-postgresql adapter via \"${databaseName}\" failed`\n        )\n      } else {\n        errors.push(error)\n      }\n    }\n  }\n\n  if (errors.length > 0) {\n    const error = new Error()\n    error.message = errors.map(({ message }) => message).join(EOL)\n    error.stack = errors.map(({ stack }) => stack).join(EOL)\n\n    const errorCodes = new Set(\n      errors.map(({ code }) => code).filter((code) => code != null)\n    )\n    if (errorCodes.size === 1) {\n      error.code = [...errorCodes][0]\n    }\n\n    throw error\n  }\n}\n\nexport default drop\n"],"file":"drop.js"}