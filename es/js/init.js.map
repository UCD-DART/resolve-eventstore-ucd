{"version":3,"sources":["../../src/js/init.js"],"names":["EventstoreResourceAlreadyExistError","LONG_STRING_SQL_TYPE","LONG_NUMBER_SQL_TYPE","INT8_SQL_TYPE","JSON_SQL_TYPE","TEXT_SQL_TYPE","AGGREGATE_ID_SQL_TYPE","init","databaseName","eventsTableName","snapshotsTableName","executeStatement","escapeId","databaseNameAsId","eventsTableNameAsId","threadsTableNameAsId","snapshotsTableNameAsId","aggregateIdAndVersionIndexName","aggregateIndexName","aggregateVersionIndexName","typeIndexName","timestampIndexName","Array","from","map","_","index","join","error","code"],"mappings":"AAAA,SAASA,mCAAT,QAAoD,yBAApD;AAEA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,qBANF,QAOO,aAPP;;AASA,MAAMC,IAAI,GAAG,OAAO;AAClBC,EAAAA,YADkB;AAElBC,EAAAA,eAFkB;AAGlBC,EAAAA,kBAHkB;AAIlBC,EAAAA,gBAJkB;AAKlBC,EAAAA;AALkB,CAAP,KAMP;AACJ,QAAMC,gBAAgB,GAAGD,QAAQ,CAACJ,YAAD,CAAjC;AACA,QAAMM,mBAAmB,GAAGF,QAAQ,CAACH,eAAD,CAApC;AACA,QAAMM,oBAAoB,GAAGH,QAAQ,CAAE,GAAEH,eAAgB,UAApB,CAArC;AACA,QAAMO,sBAAsB,GAAGJ,QAAQ,CAACF,kBAAD,CAAvC;AAEA,QAAMO,8BAA8B,GAAGL,QAAQ,CAC5C,GAAEH,eAAgB,wBAD0B,CAA/C;AAGA,QAAMS,kBAAkB,GAAGN,QAAQ,CAAE,GAAEH,eAAgB,cAApB,CAAnC;AACA,QAAMU,yBAAyB,GAAGP,QAAQ,CACvC,GAAEH,eAAgB,mBADqB,CAA1C;AAGA,QAAMW,aAAa,GAAGR,QAAQ,CAAE,GAAEH,eAAgB,OAApB,CAA9B;AACA,QAAMY,kBAAkB,GAAGT,QAAQ,CAAE,GAAEH,eAAgB,YAApB,CAAnC;;AAEA,MAAI;AACF,UAAME,gBAAgB,CACnB,gBAAeE,gBAAiB,IAAGC,mBAAoB;qBACzCZ,oBAAqB;0BAChBC,aAAc;sBAClBD,oBAAqB;wBACnBI,qBAAsB;6BACjBJ,oBAAqB;iBACjCD,oBAAqB;oBAClBG,aAAc;sBACZF,oBAAqB;;;;4BAIfe,8BAA+B;WAChDJ,gBAAiB,IAAGC,mBAAoB;;;qBAG9BI,kBAAmB;WAC7BL,gBAAiB,IAAGC,mBAAoB;;;qBAG9BK,yBAA0B;WACpCN,gBAAiB,IAAGC,mBAAoB;;;qBAG9BM,aAAc;WACxBP,gBAAiB,IAAGC,mBAAoB;;;qBAG9BO,kBAAmB;WAC7BR,gBAAiB,IAAGC,mBAAoB;;;qBAG9BD,gBAAiB,IAAGG,sBAAuB;wBACxCX,aAAc;4BACVA,aAAc;;;;qBAIrBQ,gBAAiB,IAAGE,oBAAqB;qBACzCb,oBAAqB;0BAChBA,oBAAqB;;;;oBAI3BW,gBAAiB,IAAGE,oBAAqB;;;iBAG5CO,KAAK,CAACC,IAAN,CAAW,IAAID,KAAJ,CAAU,GAAV,CAAX,EACRE,GADQ,CACJ,CAACC,CAAD,EAAIC,KAAJ,KAAe,IAAGA,KAAM,MADpB,EAERC,IAFQ,CAEH,GAFG,CAEE;QAlDO,CAAtB;AAqDD,GAtDD,CAsDE,OAAOC,KAAP,EAAc;AACd,QAAIA,KAAK,IAAI,IAAT,IAAkB,GAAEA,KAAK,CAACC,IAAK,EAAd,KAAoB,OAAzC,EAAkD;AAChD,YAAM,IAAI7B,mCAAJ,CACH,qDAAoDQ,YAAa,UAD9D,CAAN;AAGD,KAJD,MAIO;AACL,YAAMoB,KAAN;AACD;AACF;AACF,CArFD;;AAuFA,eAAerB,IAAf","sourcesContent":["import { EventstoreResourceAlreadyExistError } from 'resolve-eventstore-base'\n\nimport {\n  LONG_STRING_SQL_TYPE,\n  LONG_NUMBER_SQL_TYPE,\n  INT8_SQL_TYPE,\n  JSON_SQL_TYPE,\n  TEXT_SQL_TYPE,\n  AGGREGATE_ID_SQL_TYPE,\n} from './constants'\n\nconst init = async ({\n  databaseName,\n  eventsTableName,\n  snapshotsTableName,\n  executeStatement,\n  escapeId,\n}) => {\n  const databaseNameAsId = escapeId(databaseName)\n  const eventsTableNameAsId = escapeId(eventsTableName)\n  const threadsTableNameAsId = escapeId(`${eventsTableName}-threads`)\n  const snapshotsTableNameAsId = escapeId(snapshotsTableName)\n\n  const aggregateIdAndVersionIndexName = escapeId(\n    `${eventsTableName}-aggregateIdAndVersion`\n  )\n  const aggregateIndexName = escapeId(`${eventsTableName}-aggregateId`)\n  const aggregateVersionIndexName = escapeId(\n    `${eventsTableName}-aggregateVersion`\n  )\n  const typeIndexName = escapeId(`${eventsTableName}-type`)\n  const timestampIndexName = escapeId(`${eventsTableName}-timestamp`)\n\n  try {\n    await executeStatement(\n      `CREATE TABLE ${databaseNameAsId}.${eventsTableNameAsId}(\n        \"threadId\" ${LONG_NUMBER_SQL_TYPE} NOT NULL,\n        \"threadCounter\" ${INT8_SQL_TYPE} NOT NULL,\n        \"timestamp\" ${LONG_NUMBER_SQL_TYPE} NOT NULL,\n        \"aggregateId\" ${AGGREGATE_ID_SQL_TYPE} NOT NULL,\n        \"aggregateVersion\" ${LONG_NUMBER_SQL_TYPE} NOT NULL,\n        \"type\" ${LONG_STRING_SQL_TYPE} NOT NULL,\n        \"payload\" ${JSON_SQL_TYPE},\n        \"eventSize\" ${LONG_NUMBER_SQL_TYPE} NOT NULL,\n        PRIMARY KEY(\"threadId\", \"threadCounter\")\n      );\n      \n      CREATE UNIQUE INDEX ${aggregateIdAndVersionIndexName}\n      ON ${databaseNameAsId}.${eventsTableNameAsId}\n      USING BTREE(\"aggregateId\", \"aggregateVersion\");\n      \n      CREATE INDEX ${aggregateIndexName}\n      ON ${databaseNameAsId}.${eventsTableNameAsId}\n      USING BTREE(\"aggregateId\");\n      \n      CREATE INDEX ${aggregateVersionIndexName}\n      ON ${databaseNameAsId}.${eventsTableNameAsId}\n      USING BTREE(\"aggregateVersion\");\n      \n      CREATE INDEX ${typeIndexName}\n      ON ${databaseNameAsId}.${eventsTableNameAsId}\n      USING BTREE(\"type\");\n      \n      CREATE INDEX ${timestampIndexName}\n      ON ${databaseNameAsId}.${eventsTableNameAsId}\n      USING BTREE(\"timestamp\");\n      \n      CREATE TABLE ${databaseNameAsId}.${snapshotsTableNameAsId} (\n        \"snapshotKey\" ${TEXT_SQL_TYPE} NOT NULL,\n        \"snapshotContent\" ${TEXT_SQL_TYPE},\n        PRIMARY KEY(\"snapshotKey\")\n      );\n\n      CREATE TABLE ${databaseNameAsId}.${threadsTableNameAsId}(\n        \"threadId\" ${LONG_NUMBER_SQL_TYPE} NOT NULL,\n        \"threadCounter\" ${LONG_NUMBER_SQL_TYPE} NOT NULL,\n      PRIMARY KEY(\"threadId\")\n      );\n\n      INSERT INTO ${databaseNameAsId}.${threadsTableNameAsId}(\n        \"threadId\",\n        \"threadCounter\"\n      ) VALUES ${Array.from(new Array(256))\n        .map((_, index) => `(${index}, 0)`)\n        .join(',')}\n      ;`\n    )\n  } catch (error) {\n    if (error != null && `${error.code}` === '42P07') {\n      throw new EventstoreResourceAlreadyExistError(\n        `Double-initialize storage-postgresql adapter via \"${databaseName}\" failed`\n      )\n    } else {\n      throw error\n    }\n  }\n}\n\nexport default init\n"],"file":"init.js"}