{"version":3,"sources":["../../src/js/save-event.js"],"names":["ConcurrentError","RESERVED_EVENT_SIZE","LONG_NUMBER_SQL_TYPE","saveEvent","databaseName","eventsTableName","executeStatement","escapeId","escape","event","serializedEvent","aggregateId","aggregateVersion","type","JSON","stringify","payload","join","byteLength","Buffer","databaseNameAsString","databaseNameAsId","freezeTableNameAsString","threadsTableAsId","eventsTableAsId","timestamp","error","errorMessage","message","indexOf","Error","test"],"mappings":"AAAA,SAASA,eAAT,QAAgC,yBAAhC;AAEA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,aAA1D;;AAEA,MAAMC,SAAS,GAAG,OAChB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,eAAhB;AAAiCC,EAAAA,gBAAjC;AAAmDC,EAAAA,QAAnD;AAA6DC,EAAAA;AAA7D,CADgB,EAEhBC,KAFgB,KAGb;AACH,SAAO,IAAP,EAAa;AACX,QAAI;AACF,YAAMC,eAAe,GAAG,CACrB,GAAEF,MAAM,CAACC,KAAK,CAACE,WAAP,CAAoB,GADP,EAErB,GAAE,CAACF,KAAK,CAACG,gBAAiB,GAFL,EAGrB,GAAEJ,MAAM,CAACC,KAAK,CAACI,IAAP,CAAa,GAHA,EAItBL,MAAM,CAACM,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACO,OAAN,IAAiB,IAAjB,GAAwBP,KAAK,CAACO,OAA9B,GAAwC,IAAvD,CAAD,CAJgB,EAKtBC,IALsB,CAKjB,EALiB,CAAxB,CADE,CAQF;;AACA,YAAMC,UAAU,GACdC,MAAM,CAACD,UAAP,CAAkBR,eAAlB,IAAqCT,mBADvC;AAGA,YAAMmB,oBAAoB,GAAGZ,MAAM,CAACJ,YAAD,CAAnC;AACA,YAAMiB,gBAAgB,GAAGd,QAAQ,CAACH,YAAD,CAAjC;AACA,YAAMkB,uBAAuB,GAAGd,MAAM,CAAE,GAAEH,eAAgB,SAApB,CAAtC;AACA,YAAMkB,gBAAgB,GAAGhB,QAAQ,CAAE,GAAEF,eAAgB,UAApB,CAAjC;AACA,YAAMmB,eAAe,GAAGjB,QAAQ,CAACF,eAAD,CAAhC,CAhBE,CAkBF;;AACA,YAAMC,gBAAgB,CACnB;AACT;AACA;AACA;AACA;AACA;AACA,qCAAqCc,oBAAqB;AAC1D,iCAAiCE,uBAAwB;AACzD;AACA;AACA;AACA,iBAAiBD,gBAAiB,IAAGE,gBAAiB;AACtD;AACA;AACA;AACA;AACA,iBAAiBF,gBAAiB,IAAGE,gBAAiB;AACtD;AACA;AACA;AACA;AACA,iBAAiBF,gBAAiB,IAAGE,gBAAiB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmBF,gBAAiB,IAAGE,gBAAiB;AACxD;AACA;AACA;AACA;AACA;AACA,wBAAwBF,gBAAiB,IAAGG,eAAgB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmEtB,oBAAqB;AACxF,cAAc,CAACO,KAAK,CAACgB,SAAU;AAC/B;AACA,YAAYf,eAAgB;AAC5B,YAAYQ,UAAW;AACvB,UAtD4B,CAAtB;AAyDA;AACD,KA7ED,CA6EE,OAAOQ,KAAP,EAAc;AACd,YAAMC,YAAY,GAChBD,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACE,OAAN,IAAiB,IAAlC,GAAyCF,KAAK,CAACE,OAA/C,GAAyD,EAD3D;;AAGA,UAAID,YAAY,CAACE,OAAb,CAAqB,gCAArB,IAAyD,CAAC,CAA9D,EAAiE;AAC/D,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD,OAFD,MAEO,IAAI,yBAAyBC,IAAzB,CAA8BJ,YAA9B,CAAJ,EAAiD;AACtD,cAAM,IAAI3B,eAAJ,CAAoBS,KAAK,CAACE,WAA1B,CAAN;AACD,OAFM,MAEA;AACL,cAAMe,KAAN;AACD;AACF;AACF;AACF,CA/FD;;AAiGA,eAAevB,SAAf","sourcesContent":["import { ConcurrentError } from 'resolve-eventstore-base'\n\nimport { RESERVED_EVENT_SIZE, LONG_NUMBER_SQL_TYPE } from './constants'\n\nconst saveEvent = async (\n  { databaseName, eventsTableName, executeStatement, escapeId, escape },\n  event\n) => {\n  while (true) {\n    try {\n      const serializedEvent = [\n        `${escape(event.aggregateId)},`,\n        `${+event.aggregateVersion},`,\n        `${escape(event.type)},`,\n        escape(JSON.stringify(event.payload != null ? event.payload : null)),\n      ].join('')\n\n      // TODO: Improve calculation byteLength depend on codepage and wide-characters\n      const byteLength =\n        Buffer.byteLength(serializedEvent) + RESERVED_EVENT_SIZE\n\n      const databaseNameAsString = escape(databaseName)\n      const databaseNameAsId = escapeId(databaseName)\n      const freezeTableNameAsString = escape(`${eventsTableName}-freeze`)\n      const threadsTableAsId = escapeId(`${eventsTableName}-threads`)\n      const eventsTableAsId = escapeId(eventsTableName)\n\n      // prettier-ignore\n      await executeStatement(\n        `WITH \"freeze_check\" AS (\n          SELECT 0 AS \"freeze_zero\" WHERE (\n            (SELECT 1 AS \"EventStoreIsFrozen\")\n          UNION ALL\n            (SELECT 1 AS \"EventStoreIsFrozen\"\n            FROM \"information_schema\".\"tables\"\n            WHERE \"table_schema\" = ${databaseNameAsString}\n            AND \"table_name\" = ${freezeTableNameAsString})\n          ) = 1\n        ), \"vacant_thread_id\" AS (\n          SELECT \"threadId\"\n          FROM ${databaseNameAsId}.${threadsTableAsId}\n          FOR NO KEY UPDATE SKIP LOCKED\n          LIMIT 1\n        ), \"random_thread_id\" AS (\n          SELECT \"threadId\"\n          FROM ${databaseNameAsId}.${threadsTableAsId}\n          OFFSET FLOOR(Random() * 256)\n          LIMIT 1\n        ), \"vector_id\" AS (\n          SELECT \"threadId\", \"threadCounter\"\n          FROM ${databaseNameAsId}.${threadsTableAsId}\n          WHERE \"threadId\" = COALESCE(\n            (SELECT \"threadId\" FROM \"vacant_thread_id\"),\n            (SELECT \"threadId\" FROM \"random_thread_id\")\n          ) FOR NO KEY UPDATE\n          LIMIT 1\n        ), \"update_vector_id\" AS (\n          UPDATE ${databaseNameAsId}.${threadsTableAsId}\n          SET \"threadCounter\" = \"threadCounter\" + 1\n          WHERE \"threadId\" = (\n            SELECT \"threadId\" FROM \"vector_id\" LIMIT 1\n          )\n          RETURNING *\n        ) INSERT INTO ${databaseNameAsId}.${eventsTableAsId}(\n          \"threadId\",\n          \"threadCounter\",\n          \"timestamp\",\n          \"aggregateId\",\n          \"aggregateVersion\",\n          \"type\",\n          \"payload\",\n          \"eventSize\"\n        ) VALUES (\n          (SELECT \"threadId\" FROM \"vector_id\" LIMIT 1) +\n          (SELECT \"freeze_zero\" FROM \"freeze_check\" LIMIT 1),\n          (SELECT \"threadCounter\" FROM \"vector_id\" LIMIT 1),\n          GREATEST(\n            CAST(extract(epoch from clock_timestamp()) * 1000 AS ${LONG_NUMBER_SQL_TYPE}),\n            ${+event.timestamp}\n          ),\n          ${serializedEvent},\n          ${byteLength}\n        )`\n      )\n\n      break\n    } catch (error) {\n      const errorMessage =\n        error != null && error.message != null ? error.message : ''\n\n      if (errorMessage.indexOf('subquery used as an expression') > -1) {\n        throw new Error('Event store is frozen')\n      } else if (/aggregateIdAndVersion/i.test(errorMessage)) {\n        throw new ConcurrentError(event.aggregateId)\n      } else {\n        throw error\n      }\n    }\n  }\n}\n\nexport default saveEvent\n"],"file":"save-event.js"}