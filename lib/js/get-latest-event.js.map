{"version":3,"sources":["../../src/js/get-latest-event.js"],"names":["getLatestEvent","executeStatement","escapeId","escape","eventsTableName","databaseName","shapeEvent","eventTypes","aggregateIds","startTime","finishTime","injectString","value","injectNumber","databaseNameAsId","eventsTableNameAsId","queryConditions","push","map","resultQueryCondition","length","join","rows"],"mappings":";;;;;;;AAAA,MAAMA,cAAc,GAAG,OACrB;AACEC,EAAAA,gBADF;AAEEC,EAAAA,QAFF;AAGEC,EAAAA,MAHF;AAIEC,EAAAA,eAJF;AAKEC,EAAAA,YALF;AAMEC,EAAAA;AANF,CADqB,EASrB;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,YAAd;AAA4BC,EAAAA,SAA5B;AAAuCC,EAAAA;AAAvC,CATqB,KAUlB;AACH,QAAMC,YAAY,GAAIC,KAAD,IAAY,GAAET,MAAM,CAACS,KAAD,CAAQ,EAAjD;;AACA,QAAMC,YAAY,GAAID,KAAD,IAAY,GAAE,CAACA,KAAM,EAA1C;;AAEA,QAAME,gBAAgB,GAAGZ,QAAQ,CAACG,YAAD,CAAjC;AACA,QAAMU,mBAAmB,GAAGb,QAAQ,CAACE,eAAD,CAApC;AAEA,QAAMY,eAAe,GAAG,EAAxB;;AACA,MAAIT,UAAU,IAAI,IAAlB,EAAwB;AACtBS,IAAAA,eAAe,CAACC,IAAhB,CAAsB,cAAaV,UAAU,CAACW,GAAX,CAAeP,YAAf,CAA6B,GAAhE;AACD;;AACD,MAAIH,YAAY,IAAI,IAApB,EAA0B;AACxBQ,IAAAA,eAAe,CAACC,IAAhB,CAAsB,qBAAoBT,YAAY,CAACU,GAAb,CAAiBP,YAAjB,CAA+B,GAAzE;AACD;;AACD,MAAIF,SAAS,IAAI,IAAjB,EAAuB;AACrBO,IAAAA,eAAe,CAACC,IAAhB,CAAsB,iBAAgBJ,YAAY,CAACJ,SAAD,CAAY,EAA9D;AACD;;AACD,MAAIC,UAAU,IAAI,IAAlB,EAAwB;AACtBM,IAAAA,eAAe,CAACC,IAAhB,CAAsB,iBAAgBJ,YAAY,CAACH,UAAD,CAAa,EAA/D;AACD;;AAED,QAAMS,oBAAoB,GACxBH,eAAe,CAACI,MAAhB,GAAyB,CAAzB,GAA8B,SAAQJ,eAAe,CAACK,IAAhB,CAAqB,OAArB,CAA8B,EAApE,GAAwE,EAD1E;AAGA,QAAMC,IAAI,GAAG,MAAMrB,gBAAgB,CAChC,iBAAgBa,gBAAiB,IAAGC,mBAAoB;AAC7D,MAAMI,oBAAqB;AAC3B;AACA;AACA,YALqC,CAAnC;;AAQA,MAAIG,IAAI,CAACF,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,SAAOd,UAAU,CAACgB,IAAI,CAAC,CAAD,CAAL,CAAjB;AACD,CA/CD;;eAiDetB,c","sourcesContent":["const getLatestEvent = async (\n  {\n    executeStatement,\n    escapeId,\n    escape,\n    eventsTableName,\n    databaseName,\n    shapeEvent,\n  },\n  { eventTypes, aggregateIds, startTime, finishTime }\n) => {\n  const injectString = (value) => `${escape(value)}`\n  const injectNumber = (value) => `${+value}`\n\n  const databaseNameAsId = escapeId(databaseName)\n  const eventsTableNameAsId = escapeId(eventsTableName)\n\n  const queryConditions = []\n  if (eventTypes != null) {\n    queryConditions.push(`\"type\" IN (${eventTypes.map(injectString)})`)\n  }\n  if (aggregateIds != null) {\n    queryConditions.push(`\"aggregateId\" IN (${aggregateIds.map(injectString)})`)\n  }\n  if (startTime != null) {\n    queryConditions.push(`\"timestamp\" > ${injectNumber(startTime)}`)\n  }\n  if (finishTime != null) {\n    queryConditions.push(`\"timestamp\" < ${injectNumber(finishTime)}`)\n  }\n\n  const resultQueryCondition =\n    queryConditions.length > 0 ? `WHERE ${queryConditions.join(' AND ')}` : ''\n\n  const rows = await executeStatement(\n    `SELECT * FROM ${databaseNameAsId}.${eventsTableNameAsId}\n    ${resultQueryCondition}\n    ORDER BY \"timestamp\" DESC\n    OFFSET 0\n    LIMIT 1`\n  )\n\n  if (rows.length === 0) {\n    return null\n  }\n\n  return shapeEvent(rows[0])\n}\n\nexport default getLatestEvent\n"],"file":"get-latest-event.js"}