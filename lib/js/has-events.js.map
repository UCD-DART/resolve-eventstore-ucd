{"version":3,"sources":["../../src/js/has-events.js"],"names":["hasEvents","pool","events","executeStatement","escapeId","escape","eventsTableName","databaseName","Array","isArray","length","databaseNameAsId","eventsTableAsId","rows","map","aggregateId","aggregateVersion","join","resultSet","Set","add","result","has"],"mappings":";;;;;;;AAAA,MAAMA,SAAS,GAAG,OAAOC,IAAP,EAAaC,MAAb,KAAwB;AACxC,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,eAJI;AAKJC,IAAAA;AALI,MAMFN,IANJ;;AAOA,MAAI,CAACO,KAAK,CAACC,OAAN,CAAcP,MAAd,CAAD,IAA0BA,MAAM,CAACQ,MAAP,KAAkB,CAAhD,EAAmD;AACjD,WAAO,EAAP;AACD;;AAED,QAAMC,gBAAgB,GAAGP,QAAQ,CAACG,YAAD,CAAjC;AACA,QAAMK,eAAe,GAAGR,QAAQ,CAACE,eAAD,CAAhC;AAEA,QAAMO,IAAI,GAAG,MAAMV,gBAAgB,CAChC,iDAAgDQ,gBAAiB,IAAGC,eAAgB;YAC7EV,MAAM,CACXY,GADK,CAEJ,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,KACG,qBAAoBX,MAAM,CACzBU,WADyB,CAEzB,6BAA4BV,MAAM,CAACW,gBAAD,CAAmB,IALrD,EAOLC,IAPK,CAOA,MAPA,CAOQ,EATiB,CAAnC;AAYA,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AACA,OAAK,MAAM;AAAEJ,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAX,IAAgDH,IAAhD,EAAsD;AACpDK,IAAAA,SAAS,CAACE,GAAV,CAAe,GAAEL,WAAY,IAAGC,gBAAiB,EAAjD;AACD;;AAED,QAAMK,MAAM,GAAGnB,MAAM,CAACY,GAAP,CAAW,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,KACxBE,SAAS,CAACI,GAAV,CAAe,GAAEP,WAAY,IAAGC,gBAAiB,EAAjD,CADa,CAAf;AAIA,SAAOK,MAAP;AACD,CArCD;;eAuCerB,S","sourcesContent":["const hasEvents = async (pool, events) => {\n  const {\n    executeStatement,\n    escapeId,\n    escape,\n    eventsTableName,\n    databaseName,\n  } = pool\n  if (!Array.isArray(events) || events.length === 0) {\n    return []\n  }\n\n  const databaseNameAsId = escapeId(databaseName)\n  const eventsTableAsId = escapeId(eventsTableName)\n\n  const rows = await executeStatement(\n    `SELECT \"aggregateId\", \"aggregateVersion\" FROM ${databaseNameAsId}.${eventsTableAsId} \n    WHERE ${events\n      .map(\n        ({ aggregateId, aggregateVersion }) =>\n          `( \"aggregateId\" = ${escape(\n            aggregateId\n          )} AND \"aggregateVersion\" = ${escape(aggregateVersion)} )`\n      )\n      .join(' OR ')}`\n  )\n\n  const resultSet = new Set()\n  for (const { aggregateId, aggregateVersion } of rows) {\n    resultSet.add(`${aggregateId}-${aggregateVersion}`)\n  }\n\n  const result = events.map(({ aggregateId, aggregateVersion }) =>\n    resultSet.has(`${aggregateId}-${aggregateVersion}`)\n  )\n\n  return result\n}\n\nexport default hasEvents\n"],"file":"has-events.js"}