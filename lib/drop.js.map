{"version":3,"sources":["../src/drop.ts"],"names":["dropSecretsStore","pool","log","debug","secretsTableName","databaseName","executeStatement","escapeId","verbose","error","Error","message","stack","databaseNameAsId","secretsTableNameAsId","globalIndexName","statements","errors","statement","code","EventstoreResourceNotExistError","push","length","map","join","EOL","drop","eventsTableName","snapshotsTableName","createDropEventStorePromise","Promise","all"],"mappings":"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","sourcesContent":["import { EOL } from 'os'\nimport { EventstoreResourceNotExistError } from 'resolve-eventstore-base'\nimport getLog from './js/get-log'\nimport dropEventStore from './js/drop'\nimport { AdapterPool } from './types'\n\nconst dropSecretsStore = async (pool: AdapterPool): Promise<any> => {\n  const log = getLog('dropSecretsStore')\n\n  log.debug(`dropping secrets store database tables`)\n  const { secretsTableName, databaseName, executeStatement, escapeId } = pool\n  log.verbose(`secretsTableName: ${secretsTableName}`)\n\n  if (!secretsTableName || !escapeId || !databaseName || !executeStatement) {\n    const error = Error(`adapter pool was not initialized properly!`)\n    log.error(error.message)\n    log.verbose(error.stack || error.message)\n    throw error\n  }\n\n  log.debug(`dropping secrets store database tables and indices`)\n  log.verbose(`secretsTableName: ${secretsTableName}`)\n  log.verbose(`databaseName: ${databaseName}`)\n\n  const databaseNameAsId = escapeId(databaseName)\n  const secretsTableNameAsId = escapeId(secretsTableName)\n  const globalIndexName = escapeId(`${secretsTableName}-global`)\n\n  const statements = [\n    `DROP TABLE ${databaseNameAsId}.${secretsTableNameAsId}`,\n    `DROP INDEX IF EXISTS ${databaseNameAsId}.${globalIndexName}`,\n  ]\n\n  const errors = []\n\n  for (const statement of statements) {\n    try {\n      await executeStatement(statement)\n    } catch (error) {\n      if (error != null) {\n        log.error(error.message)\n        log.verbose(error.stack)\n        if (`${error.code}` === '42P01') {\n          throw new EventstoreResourceNotExistError(\n            `duplicate event store resource drop detected`\n          )\n        }\n        errors.push(error)\n      }\n    }\n  }\n\n  if (errors.length > 0) {\n    throw new Error(errors.map((error) => error.stack).join(EOL))\n  }\n\n  log.debug(`secrets store database tables and indices are dropped`)\n}\n\nconst drop = async (pool: AdapterPool): Promise<any> => {\n  const log = getLog('drop')\n\n  const {\n    databaseName,\n    eventsTableName,\n    snapshotsTableName,\n    executeStatement,\n    escapeId,\n  } = pool\n\n  const createDropEventStorePromise = (): Promise<any> =>\n    dropEventStore({\n      databaseName,\n      eventsTableName,\n      snapshotsTableName,\n      executeStatement,\n      escapeId,\n    })\n\n  log.debug(`dropping the event store`)\n  await Promise.all([createDropEventStorePromise(), dropSecretsStore(pool)])\n  log.debug(`the event store dropped`)\n}\n\nexport default drop\n"],"file":"drop.js"}